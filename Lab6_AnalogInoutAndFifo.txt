/*
 * Yutian Li 19105096 Lab6_AnalogInoutAndFifo
 */
#include "ee108.h"


const int SAMPLE_MS = 250;
const int ANALOG_PIN = LDR_PIN;

const int NUM_SAMPLES = 8;
const int FIFO_LEN = 4;
int fifo[FIFO_LEN]={0};

int sampleAnalogIn(int pin); // TODO - will need to be modified
int sampleAnalogIn(int pin ,int *n,int *a);
int addToFifoAndAverage(int fifo[]);
int fifoo(int fifo[],int value);

void setup() {
  Serial.begin(9600);
  Serial.println("========= Lab6_AnalogInoutAndFifo starting ===========");
}

void loop() {
  int i;
  int minT;
  int maxT;
  Serial.println("-----------");
  
  Serial.println("sample with no optional params...");
  
  for (i = 0; i < NUM_SAMPLES; i++) {
    int value = sampleAnalogIn(ANALOG_PIN); // TODO - will need to be modified
    
    Serial.print("Sample ");
    Serial.print(i+1);
    Serial.print(", value=");
    Serial.println(value);

    delay(SAMPLE_MS);
  }


  
Serial.println("sample with optional params...");
for (i = 0; i < NUM_SAMPLES; i++) {
int value = sampleAnalogIn(ANALOG_PIN,&minT,&maxT); // TODO - will need to be modified
    fifo[FIFO_LEN]=fifoo(fifo,value);
    Serial.print("Sample ");
    Serial.print(i+1);
    Serial.print(", value=");
    Serial.print(value);
    Serial.print(", max=");
    Serial.print(maxT);
    Serial.print(", min=");
    Serial.print(minT);
    Serial.print(", Fifo");
    Serial.print(fifo[FIFO_LEN]);
    Serial.print(", average");
    Serial.println(addToFifoAndAverage(fifo));
delay(SAMPLE_MS);  
}
  
  delay(8000);
}
int addToFifoAndAverage(int fifo[]){
  int all=0;
  int i;
  for(i=0;i<FIFO_LEN;i++){
    all+=fifo[i];
    
    }
    return all/FIFO_LEN;
  }
int fifoo(int fifo[],int value){
  int a[FIFO_LEN]={0};
  int i;
  for(i=0;i<FIFO_LEN-1;i++){
    a[i+1]=fifo[i];
    }
    a[0]=value;
    return a;
  }
int sampleAnalogIn(int pin) {
  int value = analogRead(pin);
  return value;
}

int sampleAnalogIn(int pin ,int *n,int *a) {
  int value = analogRead(pin);
  if(value<*n){
    *n=value;
    }
    if(value>*a){
    *a=value;
    }
  return value;
}